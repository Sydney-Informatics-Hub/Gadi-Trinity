--- Trinity-2.12.0.orig	2021-05-07 12:02:05.000000000 +1000
+++ Trinity-2.12.0	2021-05-07 13:17:56.000000000 +1000
@@ -1246,7 +1246,7 @@
     }
 
     if (! -d $TRINITY_PHASE1_OUTDIR) {
-        &process_cmd("mkdir -p $TRINITY_PHASE1_OUTDIR");
+        &mkdirs($TRINITY_PHASE1_OUTDIR);
         $MKDIR_PHASE1_OUTDIR_FLAG = 1;
     }
     
@@ -1265,7 +1265,7 @@
         $output_directory = $WORKDIR . "-" . time(); # make unique
         
         unless (-d $output_directory) {
-            &process_cmd("mkdir -p $output_directory");
+            &mkdirs($output_directory);
             $MKDIR_OUTDIR_FLAG = 1;
         }
     }
@@ -1308,12 +1308,12 @@
     
     if ( (! $TRINITY_COMPLETE_FLAG) && (! -d $output_directory)) {
         # phase - 1 mode.
-        &process_cmd("mkdir -p $output_directory");
+        &mkdirs($output_directory);
         $MKDIR_OUTDIR_FLAG = 1;
     }
     
     if ((! $genome_guided_bam) && (! -d $chrysalis_output_dir)) {
-        &process_cmd("mkdir -p $chrysalis_output_dir"); # note, won't be auto-cleaned up if not in the trinity_out_dir/
+        &mkdirs($chyrsalis_output_dir);
     }
 
     print STDERR "-changing dir to output dir: $output_directory\n" if $VERBOSE;
@@ -1431,12 +1431,12 @@
                         
         if ($Trinity_tmp_fasta_file && -s $Trinity_tmp_fasta_file) {
             $final_Trinity_fasta_file = "$TRINITY_PHASE1_OUTDIR.Trinity.fasta";
-            &process_cmd("mv $Trinity_tmp_fasta_file $final_Trinity_fasta_file");
+            &move_file($Trinity_tmp_fasta_file, $final_Trinity_fasta_file);
             
             if ($INCLUDE_SUPERTRANSCRIPTS_FLAG) {
                 if ($Trinity_tmp_supertranscripts_fasta_file && -s $Trinity_tmp_supertranscripts_fasta_file) {
-                    &process_cmd("mv $Trinity_tmp_supertranscripts_fasta_file $TRINITY_PHASE1_OUTDIR.Trinity.SuperTrans.fasta");
-                    &process_cmd("mv $Trinity_tmp_supertranscripts_gtf_file $TRINITY_PHASE1_OUTDIR.Trinity.SuperTrans.gtf");
+                    &move_file($Trinity_tmp_supertranscripts_fasta_file, "$TRINITY_PHASE1_OUTDIR.Trinity.SuperTrans.fasta");
+                    &move_file($Trinity_tmp_supertranscripts_gtf_file, "$TRINITY_PHASE1_OUTDIR.Trinity.SuperTrans.gtf");
                 }
             }
             
@@ -1474,12 +1474,12 @@
         
         if ($Trinity_tmp_fasta_file && -s $Trinity_tmp_fasta_file) {
             print STDERR "-relocating $Trinity_tmp_fasta_file to $butterfly_output_filename\n" if ($VERBOSE || ! $TRINITY_COMPLETE_FLAG);
-            &process_cmd("mv $Trinity_tmp_fasta_file $butterfly_output_filename");
+            &move_file($Trinity_tmp_fasta_file, $butterfly_output_filename);
             $final_Trinity_fasta_file = $butterfly_output_filename;
 
             if ($Trinity_tmp_supertranscripts_fasta_file && -s $Trinity_tmp_supertranscripts_fasta_file) {
-                &process_cmd("mv $Trinity_tmp_supertranscripts_fasta_file Trinity.SuperTrans.fasta");
-                &process_cmd("mv $Trinity_tmp_supertranscripts_gtf_file Trinity.SuperTrans.gtf");
+                &move_file($Trinity_tmp_supertranscripts_fasta_file, "Trinity.SuperTrans.fasta");
+                &move_file($Trinity_tmp_supertranscripts_gtf_file, "Trinity.SuperTrans.gtf");
             }
             
         }
@@ -1571,7 +1571,7 @@
                 if ($thr1->error() || $thr2->error()) {
                     die "Error prepping sequences.";
                 }
-                &process_cmd("touch left.fa.ok right.fa.ok");
+                &create_checkpoint("left.fa.ok", "right.fa.ok");
                 
                 print("Done converting input files.") if $VERBOSE;
                 ## Calculate input file sizes for performance monitoring
@@ -1583,13 +1583,13 @@
                 $pm_temp = $pm_temp / 1024 / 1024;
                 $pm_right_fa_size = sprintf('%.0f', $pm_temp);
                 
-                &process_cmd("cat left.fa right.fa > $trinity_target_fa") unless (-e "$trinity_target_fa.ok" 
+                &join_files($trinity_target_fa,"left.fa" "right.fa") unless (-e "$trinity_target_fa.ok" 
                                                                                   && (-s $trinity_target_fa == ((-s "left.fa") + (-s "right.fa"))));
 
                 unless (-s $trinity_target_fa == ((-s "left.fa") + (-s "right.fa"))) {
                     die "$trinity_target_fa is smaller (".(-s $trinity_target_fa)." bytes) than the combined size of left.fa and right.fa (".((-s "left.fa") + (-s "right.fa"))." bytes)\n";
                 }
-                &process_cmd("touch $trinity_target_fa.ok") unless (-e "$trinity_target_fa.ok");
+                &create_checkpoint("$trinity_target_fa.ok") unless (-e "$trinity_target_fa.ok");
                 
                 # we keep if we have jaccard; delete later
                 unlink ("left.fa", "right.fa") unless $jaccard_clip; # no longer needed now that we have 'both.fa', which is needed by chrysalis
@@ -1612,7 +1612,7 @@
         elsif (@single_files) {
             unless (-s $trinity_target_fa && -e "single.fa.ok") {
                 &prep_seqs(\@single_files, $seqType, "single", $SS_lib_type);
-                &process_cmd("touch single.fa.ok");
+                &create_checkpoint("single.fa.ok");
             }
             ## Calculate input file sizes for performance monitoring
             my $pm_temp = -s "single.fa";
@@ -1667,10 +1667,10 @@
             close (LONG_READS);
             
             
-            &process_cmd("cp $trinity_target_fa $trinity_target_fa_wLR");
+            &copy_file("$trinity_target_fa", "$trinity_target_fa_wLR");
             &process_cmd("cat $long_reads | sed 's/>/>LR\\\$\\\|/' >> $trinity_target_fa_wLR"); #  
             
-            &process_cmd("touch $trinity_target_fa_wLR.ok");
+            &create_checkpoint("$trinity_target_fa_wLR.ok");
                         
         }
         
@@ -1774,7 +1774,7 @@
     $pm_inchworm_start = time();
     unless (-s $inchworm_file && -e $inchworm_finished_checkpoint_file) {
         &run_inchworm($inchworm_file, $inchworm_target_fa, $SS_lib_type, $kmer_method, $KMER_SIZE, 0);
-        &process_cmd("touch $inchworm_finished_checkpoint_file");
+        &create_checkpoint("$inchworm_finished_checkpoint_file");
     }
     $pm_inchworm_end = time();
         
@@ -2012,7 +2012,7 @@
                         }
                     }
                     close $ofh_LR;
-                    &process_cmd("touch $only_LR_fa_checkpoint");
+                    &create_checkpoint("$only_LR_fa_checkpoint");
                 }
                 
             }
@@ -2431,7 +2431,7 @@
                 close $ofh if $ofh;
                 my $base_dir = &create_full_path("read_partitions/Fb_" . (int($component_counter/$file_bins_per_dir)) . "/CBin_" . (int($component_counter/$target_files_per_dir)));
                 if (! -d $base_dir) {
-                    &process_cmd("mkdir -p $base_dir");
+                    &mkdirs($base_dir);
                 }
                 my $readsfile = "$base_dir/c$component_id.trinity.reads.fa";
                 
@@ -2446,7 +2446,7 @@
         close $ofh if $ofh;
         close $ofh_read_filenames;
         
-        &process_cmd("touch $read_filenames_ok");
+        &create_checkpoint("$read_filenames_ok");
     }
     
     
@@ -2458,7 +2458,7 @@
         
     if (! -e "recursive_trinity.cmds.ok") {
         &write_trinity_partitioned_cmds($read_filenames, "recursive_trinity.cmds");
-        &process_cmd("touch recursive_trinity.cmds.ok");
+        &create_checkpoint("recursive_trinity.cmds.ok");
         print STDERR "Done prepping partitioned cmds." if $VERBOSE;
     }
 
@@ -2821,7 +2821,7 @@
         die $@;
     }
     else {
-        &process_cmd("touch $file_prefix.fa.ok"); # leave checkpoint
+        &create_checkpoint("$file_prefix.fa.ok");
     }
         
     return \@initial_files;
@@ -3256,17 +3256,17 @@
     
     if ($NORMALIZE_READS_FLAG) {
         ## can't use the orphans:
-        &process_cmd("cp $trimmed_left_file_base.P.qtrim $trimmed_left_fq");
-        &process_cmd("cp $trimmed_right_file_base.P.qtrim $trimmed_right_fq");
+        &copy_file("$trimmed_left_file_base.P.qtrim", $trimmed_left_fq);
+        &copy_file("$trimmed_right_file_base.P.qtrim", $trimmed_right_fq);
     }
     else {
         
         ## append the orphans so we can still use them in assembly
-        &process_cmd("cat $trimmed_left_file_base.P.qtrim $trimmed_left_file_base.U.qtrim > $trimmed_left_fq");
-        &process_cmd("cat $trimmed_right_file_base.P.qtrim $trimmed_right_file_base.U.qtrim > $trimmed_right_fq");
+        &join_files($trimmed_left_fq,"$trimmed_left_file_base.P.qtrim","$trimmed_left_file_base.U.qtrim");
+        &join_files($trimmed_right_fq,"$trimmed_right_file_base.P.qtrim", "$trimmed_right_file_base.U.qtrim");
     }
     
-    &process_cmd("touch $checkpoint");
+    &create_checkpoint("$checkpoint");
     
     # compress the trimmomatic direct outputs to conserve space:
     &process_cmd("gzip $trimmed_left_file_base.P.qtrim $trimmed_left_file_base.U.qtrim $trimmed_right_file_base.P.qtrim $trimmed_right_file_base.U.qtrim &");
@@ -3302,8 +3302,8 @@
     
     &process_cmd($cmd);
 
-    &process_cmd("touch $checkpoint");
-    
+    &create_checkpoint("$checkpoint");
+
     return($trimmed_fq);
 }
 
@@ -3421,7 +3421,7 @@
 
         &process_cmd($cmd);
         
-        &process_cmd("touch $checkpoint");
+        &create_checkpoint("$checkpoint");
     }
     
 
@@ -3460,7 +3460,7 @@
         my $normalized_cov_bam = "$output_directory/" . basename($genome_guided_bam) . ".norm_${normalize_max_read_cov}.bam";
         my $cmd = "$TRINITY_PLUGINS_DIR/bamsifter/bamsifter -c $normalize_max_read_cov -o $normalized_cov_bam --keep_secondary $genome_guided_bam"; 
         &process_cmd($cmd) if ! -e "$normalized_cov_bam.ok";
-        &process_cmd("touch $normalized_cov_bam.ok") if ! -e "$normalized_cov_bam.ok";
+        &create_checkpoint("$normalized_cov_bam.ok") if ! -e "$normalized_cov_bam.ok";
         
         $genome_guided_bam = $normalized_cov_bam;
     }
@@ -3526,13 +3526,14 @@
     }
     &process_cmd($cmd) unless (-e "partitions.ok");
 
-    &process_cmd("touch partitions.ok") unless (-e "partitions.ok");
+    &create_checkpoint("partitions.ok") unless (-e "partitions.ok");
+        
     
     ## generate list of the read files:
     $cmd = "find Dir_\* -name '*reads' > read_files.list";
     
     &process_cmd($cmd) unless (-s "read_files.list" && -e "read_files.list.ok");
-    &process_cmd("touch read_files.list.ok") unless (-e "read_files.list.ok"); # checkpoint
+    &create_checkpoint("read_files.list.ok") unless (-e "read_files.list.ok"); # checkpoint
 
 
     if ($ANANAS_DIR) {
@@ -3544,7 +3545,7 @@
 
     unless (-e "trinity_GG.cmds.ok") {
         &write_trinity_partitioned_cmds("read_files.list", "trinity_GG.cmds");
-        &process_cmd("touch trinity_GG.cmds.ok");
+        &create_checkpoint("trinity_GG.cmds.ok");
     }
     
     if ($NO_DISTRIBUTED_TRINITY_EXEC) {
@@ -3668,7 +3669,7 @@
     $cmd .= " > $cmds_file";
     
     &process_cmd($cmd) unless (-e "$cmds_file.ok");
-    &process_cmd("touch $cmds_file.ok") unless (-e "$cmds_file.ok");
+    &create_checkpoint("$cmds_file.ok") unless (-e "$cmds_file.ok");
 
     
     return;
@@ -3792,7 +3793,7 @@
         close $fh;
         close $ofh;
 
-        &process_cmd("touch $ananas_cmds_checkpoint");
+        &create_checkpoint("$ananas_cmds_checkpoint");
     }
     
     if ($NO_DISTRIBUTED_TRINITY_EXEC) {
@@ -3855,7 +3856,7 @@
         }
         close $ofh;
     
-        &process_cmd("touch $long_reads_fa_checkpoint_file");
+        &create_checkpoint("$long_reads_fa_checkpoint_file");
     }
     
     unless (-s $long_reads_fa) {
@@ -3871,7 +3872,7 @@
     my $LR_kmer_checkpoint_file = "$LR_kmer_abundances_file.ok";
     unless (-s $LR_kmer_abundances_file && -e $LR_kmer_checkpoint_file) {
         &process_cmd($cmd);
-        &process_cmd("touch $LR_kmer_checkpoint_file");
+        &create_checkpoint("$LR_kmer_checkpoint_file");
     }
     
 
@@ -3894,8 +3895,8 @@
     $last_iworm_header =~ />a(\d+);/ or die "Error, cannot extract last iworm header info from $inchworm_contigs_file";
     my $iworm_index = $1;
 
-    &process_cmd("cp $inchworm_contigs_file $new_inchworm_file");
-    
+    &copy_file("$inchworm_contigs_file", "$new_inchworm_file");
+
     open (my $ofh, ">>$new_inchworm_file") or die "Error, cannot write to $new_inchworm_file";
     
     my $fasta_reader = new Fasta_reader($long_reads_fa);
@@ -3920,7 +3921,7 @@
     close $ofh;
     
 
-    &process_cmd("touch $new_inchworm_checkpoint_file");
+    &create_checkpoint("$new_inchworm_checkpoint_file");
     return($new_inchworm_file);
 }
 
@@ -4134,3 +4135,91 @@
     
     return(0); # not finding a paired-end read within the first 1k reads, just assume single end mode.
 }
+
+sub create_checkpoint {
+
+    print STDERR &mytime."CHECKPOINT: @_\n" if ($VERBOSE || ! $TRINITY_COMPLETE_FLAG);
+    my $start_time = time();
+
+    foreach my $file (@_) {
+
+        my $fd = POSIX::open($file, &POSIX::O_WRONLY | &POSIX::O_CREAT, 0777);
+        unless (defined($fd)) {
+            confess "Error, could not create checkpoint file $file: $!";
+        }
+
+        POSIX::close($fd);
+
+    }
+
+    my $end_time = time();
+    print STDERR "CHECKPOINT finished (" . ($end_time - $start_time) . " seconds)\n" if $VERBOSE;
+
+}
+
+sub mkdirs {
+
+    print STDERR &mytime."MKDIR: @_\n" if ($VERBOSE || ! $TRINITY_COMPLETE_FLAG);
+    my $start_time = time();
+
+    foreach my $dir (@_) {
+        File::Path::make_path($dir) or confess("Error, could not create directory $dir: $!");
+    }
+
+    my $end_time = time();
+    print STDERR "MKDIR finished (" . ($end_time - $start_time) . " seconds)\n" if $VERBOSE;
+
+}
+
+sub copy_file {
+
+    my ($src, $dst) = @_;
+
+    print STDERR &mytime."COPY: $src to $dst\n" if ($VERBOSE || ! $TRINITY_COMPLETE_FLAG);
+    my $start_time = time();
+
+    File::Copy::copy($src, $dst) or confess("Error, could not copy $src to $dst: $!");
+
+    my $end_time = time();
+    print STDERR "COPY finished (" . ($end_time - $start_time) . " seconds)\n" if $VERBOSE;
+
+}
+
+sub move_file {
+
+    my ($src, $dst) = @_;
+
+    print STDERR &mytime."MOVE: $src to $dst\n" if ($VERBOSE || ! $TRINITY_COMPLETE_FLAG);
+    my $start_time = time();
+
+    File::Copy::move($src, $dst) or confess("Error, could not move $src to $dst: $!");
+
+    my $end_time = time();
+    print STDERR "MOVE finished (" . ($end_time - $start_time) . " seconds)\n" if $VERBOSE;
+
+}
+
+sub join_files {
+
+    my $dst = shift;
+
+    print STDERR &mytime."JOIN: @_ to $dst\n" if ($VERBOSE || ! $TRINITY_COMPLETE_FLAG);
+    my $start_time = time();
+
+    open my $out_fh, '>', $dst or confess("Error, could not open $dst: $!");
+
+    foreach my $src (@_) {
+        local $/ = \1048576;
+	open my $in_fh, '<', $src or confess("Error, could not open $src: $!");
+	while (my $chunk = <$in_fh>) {
+            print $out_fh $chunk;
+        }
+	close $in_fh or confess("Error, could not close $src: $!");
+    }
+
+    close $out_fh or confess("Error, could not close $dst: $!");
+
+    my $end_time = time();
+    print STDERR "JOIN finished (" . ($end_time - $start_time) . " seconds)\n" if $VERBOSE;
+
+}
